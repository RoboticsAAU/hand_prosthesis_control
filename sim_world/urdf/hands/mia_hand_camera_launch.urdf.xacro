<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="$(arg robotNamespace)">
    <!-- Arguments -->
    <xacro:arg name="default_mia_model"             default="false" />
    <xacro:arg name="right_hand"                    default="true" />
    <xacro:arg name="robotNamespace"                default="mia_hand_camera"/> <!-- /mia_hand_camera -->
    <xacro:arg name="joint_limits_config_filename"  default="joint_limits.yaml" />
    <xacro:arg name="hw_interface_thumb_fle"        default="EffortJointInterface"/>
    <xacro:arg name="hw_interface_index_fle"        default="EffortJointInterface"/>
    <xacro:arg name="hw_interface_mrl_fle"          default="EffortJointInterface"/>
    <xacro:arg name="hw_interface_wrist_rotation"   default="EffortJointInterface"/>
    <xacro:arg name="hw_interface_wrist_exfle"      default="EffortJointInterface"/>
    <xacro:arg name="hw_interface_wrist_ulra"       default="EffortJointInterface"/>
    <xacro:arg name="camera_name"                   default="camera" />
    <xacro:arg name="wrist_rotation"                default="true" />



    <!-- Materials -->
    <xacro:include filename="$(find mia_hand_description)/materials/materials.xacro"/>

    <!-- Wrist -->
    <xacro:include filename="$(find sim_world)/urdf/macros/wrist_gazebo.urdf.xacro"/>

    <xacro:wrist_gazebo hw_interface_wrist_rotation="$(arg hw_interface_wrist_rotation)"
                        hw_interface_wrist_exfle="$(arg hw_interface_wrist_exfle)"
                        hw_interface_wrist_ulra= "$(arg hw_interface_wrist_ulra)"
                        robotNamespace= "$(arg robotNamespace)"
                        LoadGZPlugin="false"/>
    
    <!-- Import Transmission and all Gazebo-customization elements, including Gazebo colors and teh Gazebo plugin-->
    <xacro:include filename="$(find mia_hand_description)/urdf/mia_hand_gazebo.urdf.xacro" />

    <xacro:mia_gazebo hw_interface_thumb_fle="$(arg hw_interface_thumb_fle)"
                        hw_interface_index_fle="$(arg hw_interface_index_fle)"
                        hw_interface_mrl_fle= "$(arg hw_interface_mrl_fle)"
                        robotNamespace= "$(arg robotNamespace)"
                        LoadGZPlugin="true"/>

    

    <!-- Import default robot model -->
    <xacro:if value="$(arg right_hand)">
        <xacro:include filename="$(find mia_hand_description)/urdf/mia_hand.urdf.xacro"/>
    </xacro:if>

    <xacro:unless value="$(arg right_hand)">
        <xacro:include filename="$(find mia_hand_description)/urdf/mia_hand_left.urdf.xacro"/>
    </xacro:unless>

    <xacro:if value="$(arg default_mia_model)">
        <xacro:if value="$(arg right_hand)">
        <xacro:mia_hand_robot />
        </xacro:if>
        <xacro:unless value="$(arg right_hand)">
        <xacro:mia_hand_robot_left />
        </xacro:unless>
    </xacro:if>

    <xacro:unless value="$(arg default_mia_model)">
        <xacro:if value="$(arg right_hand)">
        <xacro:mia_hand_robot joint_limits_parameters_file= '$(find sim_world)/config/$(arg joint_limits_config_filename)' />
        </xacro:if>

        <xacro:unless value="$(arg right_hand)">
            <xacro:mia_hand_robot_left joint_limits_parameters_file= '$(find sim_world)/config/$(arg joint_limits_config_filename)' />
        </xacro:unless>
    </xacro:unless>


    <!-- base_link to palm transform-->
    <link name="base_link"/>

    <xacro:if value="$(arg right_hand)">
        <joint name="j_palm" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0"/> <!-- origin xyz="0 0 1" rpy="1.57 0 0""/ -->
        <parent link="base_link"/>
        <child link="wrist_link"/>
        </joint>
    </xacro:if>
    <xacro:unless value="$(arg right_hand)">
        <joint name="j_palm" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0"/> <!-- origin xyz="0 0 1" rpy="1.57 3.14 0""/ -->
        <parent link="base_link"/>
        <child link="wrist_link"/>
        </joint>
    </xacro:unless>
    <link name="wrist_link">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="0.1"/>
            <inertia ixx="0.01" ixy="0" ixz="0" iyy="0.01" iyz="0" izz="0.01"/>
        </inertial>
    </link>

    <xacro:if value="$(arg wrist_rotation)">
        <!-- Include the macro to read the wrist joint limits -->
        <xacro:include filename="$(find sim_world)/urdf/macros/import_joint_limits_wrist.xacro"/>
        <!-- Read the wrist joint limits and extract them into xacro:properties -->
        <xacro:read_joint_limits_wrist joint_limits_parameters_file="$(find sim_world)/config/joint_limits.yaml" hand_params_file="$(find rl_env)/params/hand/mia_hand_params.yaml"/>

        <!-- Motions for a right hand: -->
        <!-- Pronation (inwards so the palm is down) /suppination (palm up) = Rotation -->
        <joint name="j_wrist_rotation" type="revolute">
            <limit lower="${j_wrist_rotation_lower_limit}" upper="${j_wrist_rotation_upper_limit}" effort="100" velocity="${j_wrist_rotation_vel_upper_limit}"/>
            <origin xyz="0 0.0 0" rpy="0 0 0"/>
            <parent link="wrist_link"/>
            <child link="rot_link"/>
            <!-- <dynamics damping="0.0" friction="0.0"/> -->
            <axis xyz="0.0 1.0 0.0"/>
        </joint>
        <link name="rot_link">
            <inertial>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <mass value="0.1"/>
                <inertia ixx="0.01" ixy="0" ixz="0" iyy="0.01" iyz="0" izz="0.01"/>
            </inertial>
        </link>

        <!-- Extension (up) / flexion (down) = up/down  -->
        <joint name="j_wrist_exfle" type="revolute">
            <limit lower="${j_wrist_exfle_lower_limit}" upper="${j_wrist_exfle_upper_limit}" effort="100" velocity="${j_wrist_exfle_vel_upper_limit}"/>
            <origin xyz="0.0 0 0" rpy="0 0 0"/>
            <parent link="rot_link"/>
            <child link="exfle_link"/>
            <!-- <dynamics damping="0.0" friction="0.0"/> -->
            <axis xyz="1.0 0.0 0.0"/>
        </joint>
        <link name="exfle_link">
            <inertial>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <mass value="0.1"/>
                <inertia ixx="0.01" ixy="0" ixz="0" iyy="0.01" iyz="0" izz="0.01"/>
            </inertial>
        </link>
        
        <!-- Ulnar (outwards) / Radial (inwards)-->
        <joint name="j_wrist_ulra" type="revolute">
            <limit lower="${j_wrist_ulra_lower_limit}" upper="${j_wrist_ulra_upper_limit}" effort="100" velocity="${j_wrist_ulra_vel_upper_limit}"/>
            <origin xyz="0 0 0.0" rpy="0 0 0"/>
            <parent link="exfle_link"/>
            <child link="palm"/>
            <!-- <dynamics damping="0.0" friction="0.0"/> -->
            <axis xyz="0.0 0.0 1.0"/>
        </joint>
    </xacro:if>
    <xacro:unless value="$(arg wrist_rotation)">
        <joint name="j_wrist" type="fixed">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <parent link="wrist_link"/>
            <child link="palm"/>
        </joint>
    </xacro:unless>

    <!-- realsense camera -->
    <xacro:include filename="$(find realsense2_description)/urdf/_d435.urdf.xacro"/>
    <xacro:if value="$(arg right_hand)">
        <xacro:sensor_d435 parent="palm" name="$(arg camera_name)" use_nominal_extrinsics="true">
            <origin xyz="0 0 -0.05" rpy="3.1416 0 1.5708"/>
        </xacro:sensor_d435>
    </xacro:if>
    <xacro:unless value="$(arg right_hand)">
        <xacro:sensor_d435 parent="palm" name="$(arg camera_name)" use_nominal_extrinsics="true">
            <origin xyz="0 0 -0.05" rpy="0 3.1416 1.5708"/>
        </xacro:sensor_d435>
    </xacro:unless>
    
    <!-- realsense Gazebo Plugin -->
    <xacro:include filename="$(find sim_world)/urdf/cameras/_d435.gazebo.xacro"/>
    <xacro:gazebo_d435 camera_name="$(arg camera_name)" 
                    reference_link="$(arg camera_name)_link" 
                    topics_ns="$(arg camera_name)"
                    depth_optical_frame="$(arg camera_name)_depth_optical_frame" 
                    color_optical_frame="$(arg camera_name)_color_optical_frame" 
                    infrared1_optical_frame="$(arg camera_name)_left_ir_optical_frame" 
                    infrared2_optical_frame="$(arg camera_name)_right_ir_optical_frame" />

</robot>

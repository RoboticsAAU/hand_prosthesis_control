<?xml version="1.0"?>
<launch>
     <!-- Arguments you can pass this launch file, for example paused:=true -->
     <arg name="Rviz_on" default="true" doc="If true, start Rviz and the joint state gui" />
     <arg name="use_joint_gui" default="false" doc="If true, start Rviz and the joint state gui" />
     <arg name="paused" default="true"/>
     <arg name="use_sim_time" default="true"/>
     <arg name="Gazebo_gui" default="true"/>
     <arg name="headless" default="false"/>
     <arg name="debug" default="false"/>
     <arg name="image_view" default="false"/>
     <arg name="robotNamespace" default="mia_hand"/> <!-- /mia_hand_camera -->
     <arg name="load_default_mia_model" default="false" />
     <arg name="right_hand" default="true" doc="True to for right hand False otherwise" /> <!-- Params to set right or left Mia hand version  -->
     <arg name="wrist_rotation" default="true" doc="True to add wrist rotation to the hand" /> <!-- Params to set rotation of the wrist of the Mia hand  -->
     <arg name="joint_limits_config_filename" default="joint_limits.yaml" doc="name of the yaml file to calibrate joints limit of URDF file" />
     <arg name="transmission_config_filename" default="transmission_config.yaml" doc="name of the yaml file to calibrate transmissions of MiaHand" />
     <arg name="finger_controller_type" default="eff" doc="type of controller for fingers. Values: position, velocity, eff, eff_position, (eff_velocity has not been tuned), Remember to change the controller topics in mia_hand_params.yaml"/>
     <arg name="wrist_controller_type" default="eff" doc="type of controller for wrist joints. Values: position, velocity, eff, eff_position, (eff_velocity has not been tuned)"/>



     <!-- Arguments to upload hardware interface and controllers of each finger -->
     <arg name="tc_type" default="eff" doc="type of trajectory controller to launch. Values: vel, pos, eff"/>
     <arg name="hw_interface_thumb_fle" default="EffortJointInterface"
          doc="type of hardware interface for thumb flexion. Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>
     <arg name="hw_interface_index_fle" default="EffortJointInterface"
          doc="type of hardware interface for index flexion. Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>
     <arg name="hw_interface_mrl_fle" default="EffortJointInterface"
          doc="type of hardware interface for mrl flexion. Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>
     <!-- Wrist interfaces: -->
     <arg name="hw_interface_wrist_rotation" default="EffortJointInterface"
          doc="type of hardware interface for wrist rotation. Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>
     <arg name="hw_interface_wrist_exfle" default="EffortJointInterface"
          doc="type of hardware interface for wrist extension and flexion. Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>
     <arg name="hw_interface_wrist_ulra" default="EffortJointInterface"
          doc="type of hardware interface for wrist ulnar and radial motion. Values: EffortJointInterface, PositionJointInterface VelocityJointInterface"/>

     <arg name="controller_thumb_fle" default="$(arg finger_controller_type)"
          doc="type of controller for thumb flexion. Values: position, velocity, eff, eff_position, (eff_velocity has not been tuned)"/>
     <arg name="controller_index_fle" default="$(arg finger_controller_type)"
          doc="type of controller for index flexion + thumb abd. Values: position,velocity,eff, eff_position, (eff_velocity has not been tuned)"/>
     <arg name="controller_mrl_fle"   default="$(arg finger_controller_type)"
          doc="type of controller for mrl fingers flexion. Values: position, velocity, eff, eff_position,(eff_velocity has not been tuned)"/>
     <!-- Wrist Controller types -->
     <arg name="controller_wrist_rotation" default="$(arg wrist_controller_type)"
          doc="type of controller for wrist rotation. Values: position, velocity, eff, eff_position, (eff_velocity has not been tuned)"/>
     <arg name="controller_wrist_exfle" default="$(arg wrist_controller_type)"
          doc="type of controller for wrist flexion and extension. Values: position,velocity,eff, eff_position, (eff_velocity has not been tuned)"/>
     <arg name="controller_wrist_ulra"   default="$(arg wrist_controller_type)"
          doc="type of controller for ulnar and radial motion. Values: position, velocity, eff, eff_position,(eff_velocity has not been tuned)"/>

     <!-- Gazebo empty_world.launch -->
     <include file="$(find gazebo_ros)/launch/empty_world.launch">
          <arg name="debug" value="$(arg debug)" />
          <arg name="gui" value="$(arg Gazebo_gui)" />
          <arg name="paused" value="$(arg paused)"/>
          <arg name="use_sim_time" value="$(arg use_sim_time)"/>
          <arg name="headless" value="$(arg headless)"/>
     </include>

     <!-- Load robot URDF to param server and run robot_state_publisher for rviz etc -->
     <include file="$(find sim_world)/launch/mia_view_hand_env.launch">
          <arg name="Rviz_on" value="$(arg Rviz_on)"/>
          <arg name="use_joint_gui" value="$(arg use_joint_gui)"/>
          <arg name="hw_interface_thumb_fle" value="$(arg hw_interface_thumb_fle)"/>
          <arg name="hw_interface_index_fle" value="$(arg hw_interface_index_fle)"/>
          <arg name="hw_interface_mrl_fle" value="$(arg hw_interface_mrl_fle)"/>
          <arg name="robotNamespace"   value="$(arg robotNamespace)"/> <!-- /mia_hand_camera -->
          <arg name="load_default_mia_model"   value="$(arg load_default_mia_model)"/>
          <arg name="right_hand"   value="$(arg right_hand)"/>
          <arg name="wrist_rotation" value="$(arg wrist_rotation)"/>
          
          <arg name="joint_limits_config_filename" default="joint_limits.yaml" doc="name of the yaml file to calibrate joints limit of URDF file" />
          <arg name="transmission_config_filename" default="transmission_config.yaml" doc="name of the yaml file to calibrate transmissions of MiaHand" />
     </include>

     <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
     <group ns = "$(arg robotNamespace)">
          <!-- Load urdf as robot description -->
          <param name="robot_description" command="$(find xacro)/xacro '$(find sim_world)/urdf/hands/mia_hand_camera_launch.urdf.xacro'
               default_mia_model:=$(arg load_default_mia_model)
               right_hand:=$(arg right_hand)
               robotNamespace:=$(arg robotNamespace)
               joint_limits_config_filename:=$(arg joint_limits_config_filename)
               hw_interface_thumb_fle:=$(arg hw_interface_thumb_fle)
               hw_interface_index_fle:=$(arg hw_interface_index_fle)
               hw_interface_mrl_fle:=$(arg hw_interface_mrl_fle)
               hw_interface_wrist_rotation:=$(arg hw_interface_wrist_rotation)
               hw_interface_wrist_exfle:=$(arg hw_interface_wrist_exfle)
               hw_interface_wrist_ulra:=$(arg hw_interface_wrist_ulra)
               wrist_rotation:=$(arg wrist_rotation)"
          />

          <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
               args="-urdf -model $(arg robotNamespace) -param robot_description"/>
          
          <!-- Load the path of the config file of the MIA trasnsmission -->
          <param name="mia_transmissions_config_" type="string" value="$(find mia_hand_description)/calibration/transmission_config.yaml " />
          
          <!-- Load joint controller configurations from YAML file to parameter server -->
          <rosparam file="$(find mia_hand_gazebo)/config/mia_hand_controllers.yaml" command="load"/>
          <rosparam file="$(find mia_hand_gazebo)/config/gazebo_pid_thumb_opp.yaml" command="load"/>
          <rosparam file="$(find sim_world)/config/wrist_controllers.yaml" command="load"/>
     </group>

     <!-- load and start the controllers torso_controller -->
     <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
     output="screen" ns="$(arg robotNamespace)" args="j_thumb_fle_$(arg controller_thumb_fle)_controller
                                                       j_index_fle_$(arg controller_index_fle)_controller
                                                       j_mrl_fle_$(arg controller_mrl_fle)_controller
                                                       j_wrist_rotation_$(arg controller_wrist_rotation)_controller
                                                       j_wrist_exfle_$(arg controller_wrist_exfle)_controller
                                                       j_wrist_ulra_$(arg controller_wrist_ulra)_controller
                                                       joint_state_controller"/>  <!-- j_thumb_opp_$(arg controller_index_fle)_controller -->


     <!-- Run image processing (rectification and registration) -->
     <include file="$(find sim_world)/launch/image_processing.launch">
          <arg name="robotNamespace" value="$(arg robotNamespace)"/>
     </include>

     <!-- Run image_view to visualize the rectified and registered images -->
     <node if="$(arg image_view)" name="image_view_rgb" pkg="image_view" type="image_view" respawn="false" output="screen">
          <remap from="image" to="$(arg robotNamespace)/camera/color/image_rect" />
     </node>
     <node if="$(arg image_view)" name="image_view_depth" pkg="image_view" type="image_view" respawn="false" output="screen">
          <remap from="image" to ="$(arg robotNamespace)/camera/depth/image_rect" />
     </node>
     <node if="$(arg image_view)" name="image_view_depth_registered" pkg="image_view" type="image_view" respawn="false" output="screen">
          <remap from="image" to ="$(arg robotNamespace)/camera/depth_registered/image_rect" />
     </node>

</launch>
